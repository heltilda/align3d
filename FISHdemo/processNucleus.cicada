experimentDirectory := "~/Desktop/align3d/FISH_Demo/FISH10spot/"
numControls := 100
firstCell := 1
lastCell := 21

stdev :: {
    
    c1 :: argsTop :: int
    sqTot :: avg :: double
    
    
    code
    
    argsTop = top(args[1])
    avg = mean(args[1])
    
    sqTot = 0
    for c1 in <1, top(args[1])>  sqTot = that + (args[1][c1] - avg)^2
    
    return new((sqTot/argsTop)^.5)
}

controls :: [numControls+1] { entropy :: logZ :: iterations :: double }
controlSummary :: [] { startingEntropy :: entropy :: logZ :: numIterations :: entropyRank :: logZRank :: iterationsRank :: double }
chromosomeWidths :: [] double
spotZs :: [] double

chromosome :: cellNo :: int
cellNoStr :: string
startingEntropy :: double

for cellNo in <firstCell, lastCell>  (
for chromosome in <1, 2>  (
    
    cellNoStr = cat("0", cellNo)[<top-1, top>]
    cellDirectory := cat(experimentDirectory, "bross_072115_100x_", cellNoStr, "_R3D_D3D_TIFFS/")
    aligner3d.loadExperiment( cat(experimentDirectory, "contourPts_Trask_150kb_500nm.txt"),
                   cat(cellDirectory, "xyzPts_ch", chromosome, "_calibrated.txt") )
    
|*    spotZs[*] = aligner3d.spots[*].z
    sort(spotZs)
    chromosomeWidths[+top+1] = spotZs[.75*top] - spotZs[.25*top]  *|
    chromosomeWidths[+top+1] = stdev(aligner3d.spots[*].z)
    
    missingSpots := 0
    for c1 in <1, 3>  &
        missingSpots = that + max(0, find(cat(aligner3d.loci[*].color), cat(c1), 0) - &
                        find(cat(aligner3d.spots[*].color), cat(c1), 0))
    
    numBetterControlsByEntropy := numBetterControlsByLogZ := numBetterControlsByIteration := 0
    for c1 in <1, numControls+1>  (
        aligner3d.restart(; lp = 500, p_fn = 0.9*(missingSpots/aligner3d.numLoci) + 0.1,
                            neighbor_p_cutoff = 0)
        if c1 == 1  then startingEntropy = aligner3d.entropy(; countFalseNegatives = false)
|        rtrn := aligner3d.iterate(300)
        rtrn := aligner3d.iterate(0; byEnumeration = calcExact = true)
throw(1)
        controls[c1] = { aligner3d.entropy(; countFalseNegatives = false), rtrn[5], rtrn[1] }
        
        if c1 == 1  then &
            aligner3d.exportProbs(cat(cellDirectory, "AllProbs_calibrated", chromosome, ".txt"))
        else  (
            if controls[c1].entropy < controls[1].entropy  then &
                numBetterControlsByEntropy = that + 1
            if controls[c1].logZ > controls[1].logZ  then &
                numBetterControlsByLogZ = that + 1
            if controls[c1].iterations < controls[1].iterations  then &
                numBetterControlsByIteration = that + 1
            else if controls[c1].iterations == controls[1].iterations and random() < .5  then &
                numBetterControlsByIteration = that + 1     )
        
        aligner3d.scramble()
    )
    
    controlSummary[+top+1] = { startingEntropy, controls[1].entropy, controls[1].logZ, controls[1].iterations,
            numBetterControlsByEntropy, numBetterControlsByLogZ, numBetterControlsByIteration }
    
    print("Cell ", cellNo, " ch ", chromosome, ":  num better controls = ",
            numBetterControlsByEntropy, ", ", numBetterControlsByLogZ)
    if controls[1].iterations >= aligner3d.iterate.max_iterations  then print(" ***")
    printl()
    saveTable(cat(cellDirectory, "controls_calibrated_ch", chromosome, ".txt"), controls)
))

saveTable(cat(experimentDirectory, "controlSummary_calibrated.txt"), controlSummary)
